# This template is pre-configured to run what's known as a speculative plan in Terraform Cloud.
# Speculative plans are plan-only runs to test changes to configuration. Perfect for code reviews on a Pull Request.
#
# This workflow is configured to trigger when a pull request is opened against your `main` branch,
# **IF** the set paths contain files that have changed. If the workflow runs, the included steps will upload your terraform configuration, create a new run, and output the plan information to a PR comment.
#
# NOTE: The last step in this template includes a script that will upsert a PR comment. (REQUIRES `Read and write permissions`)
---
name: Terraform Cloud Apply Run

on:
  push:
    branches:
      ## RECOMMENDED: Change for your target branch, or include branches you wish to trigger this workflow file.
      - main
    ## RECOMMENDED: Specify to only run this workflow file when terraform configuration has changed.
    #paths:
    #- "<<INPUT REQUIRED>>" ## Example: 'terraform/**.tf'

permissions:
  id-token: write
  contents: read

## Add shared Environment Variables across jobs here ##
env:
  TF_CLOUD_ORGANIZATION: "samuellee-dev" ## Name of your existing Terraform Cloud Organization. RECOMMENDED: use repository variables. ex. "${{ vars.TF_CLOUD_ORGANIZATION }}"
  #TF_API_TOKEN: "${{ secrets.VAULT_SECRET_KEY }}" ## Terraform Cloud API Token. RECOMMENDED: replace with github action secrets. ex. "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "aws-3tier-network-architecture" ## Name of your existing workspace in Terraform Cloud.
  CONFIG_DIRECTORY: "./" ## Directory of your Terraform Configuration. Relative to the project root.
  VAULT_URL: ${{ secrets.VAULT_ADDR }}
  VAULT_AUTH_PATH: jwt
  VAULT_ROLE: ${{ secrets.VAULT_ROLE }}
  ## Additional env variables
  # TF_LOG: DEBUG ## Helpful for troubleshooting
  # TF_MAX_TIMEOUT: "30m" ## If you wish to override the default "1h"

jobs:
  terraform-cloud-apply-run:
    runs-on: ubuntu-latest
    ## OPTIONAL: can scope variables to this specific job
    ## Example:
    # env:
    #  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORG }}
    steps:
      - uses: actions/checkout@v3

      # - name: Troubleshooting
      #   run: |
      #     curl -sSL -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | \
      #     jq "{ jwt: .value, role: \"$VAULT_ROLE\" }" > ./token.json

      #     echo 'GitHub Actions Token Claims'
      #     cat ./token.json | jq -r '.jwt | split(".") | .[1] | @base64d' | jq

      #     echo 'Vault Login Response'
      #     curl -sSLf -X POST -H "Content-Type: application/json" -H "X-Vault-Namespace: admin" --data @token.json $VAULT_URL/v1/auth/$VAULT_AUTH_PATH/login

      #     # Remove the token file when we're done (if we don't fail)
      #     rm ./token.json
      # #   # env:
      # #   #   VAULT_URL: ${{ secrets.VAULT_ADDR }}
      # #   #   VAULT_AUTH_PATH: jwt
      # #   #   VAULT_ROLE: ${{ secrets.VAULT_ROLE }}

      - name: Retrieve Secrets
        id: secretdata
        uses: hashicorp/vault-action@v3.0.0
        with:
          method: jwt
          url: ${{ secrets.VAULT_ADDR }}
          namespace: ${{ secrets.VAULT_NAMESPACE }}
          role: ${{ secrets.VAULT_ROLE }}
          secrets: ${{ secrets.VAULT_SECRET_PATH }} ${{ secrets.VAULT_SECRET_KEY }} | TF_API_TOKEN

      - name: Set TFC_API_TOKEN env
        run: echo "TF_API_TOKEN=${{ steps.secretdata.outputs.TF_API_TOKEN }}" >> $GITHUB_ENV

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.0
        id: upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.0
        id: create-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.upload.outputs.configuration_version_id }}

      - name: Apply Run
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.3.0
        id: apply
        if: ${{ fromJSON(steps.create-run.outputs.payload).data.attributes.actions.IsConfirmable }}
        with:
          run: ${{ steps.create-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"
